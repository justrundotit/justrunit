ARG ELIXIR_VERSION=1.17.2
ARG OTP_VERSION=27.0.1
ARG DEBIAN_VERSION=bullseye-20240722-slim
ARG BUILDER_IMAGE="hexpm/elixir:${ELIXIR_VERSION}-erlang-${OTP_VERSION}-debian-${DEBIAN_VERSION}"
ARG CLOUD_HYPERVISOR_VERSION=v41.0
ARG KERNEL_VERSION=5.11

FROM ${BUILDER_IMAGE}

# Set development environment
ENV MIX_ENV=dev

##
# Install dependencies 
##

RUN apt-get update -y && apt-get install -y build-essential git curl inotify-tools dosfstools mtools \ 
    libncurses5-dev libssl-dev bison flex libelf-dev bc \
    qemu-utils \
    && apt-get clean && rm -f /var/lib/apt/lists/*_*

RUN curl -fsSL https://deb.nodesource.com/setup_22.x | bash - && apt-get install -y nodejs

# Install cloud-hypervisor as pre-built binary
RUN curl -fsSL https://github.com/cloud-hypervisor/cloud-hypervisor/releases/download/v41.0/cloud-hypervisor-static -o /usr/local/bin/cloud-hypervisor \
    && chmod +x /usr/local/bin/cloud-hypervisor

##
# Build Linux Kernel
##

# Clone the Cloud Hypervisor Linux branch
RUN git clone --depth 1 https://github.com/cloud-hypervisor/linux.git -b ch-6.2 linux-cloud-hypervisor
WORKDIR linux-cloud-hypervisor
# Use the x86-64 cloud-hypervisor kernel config to build your kernel for x86-64
RUN curl -O https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/resources/linux-config-x86_64
RUN cp linux-config-x86_64 .config
# Do native build of the x86-64 kernel
RUN KCFLAGS="-Wa,-mx86-used-note=no" make bzImage -j `nproc`
WORKDIR ..

# Download cloud image and convert it to a format accepted by cloud-hypervisor
RUN curl -O https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.img
RUN qemu-img convert -p -f qcow2 -O raw focal-server-cloudimg-amd64.img focal-server-cloudimg-amd64.raw

# Set working directory
WORKDIR /app

##
# Prepare app and run it
##

# Install hex + rebar
RUN mix local.hex --force && \
    mix local.rebar --force

# Install Phoenix
RUN mix archive.install hex phx_new --force

# Copy mix files
COPY mix.exs mix.lock ./

# Install mix dependencies
RUN mix deps.get

# Copy config files
COPY config config

# Copy the rest of the application code
COPY . .

# Install npm dependencies
WORKDIR /app/assets
RUN npm install

# Return to the app directory
WORKDIR /app

# Start entrypoint.sh script
ENTRYPOINT ["./entrypoint.sh"]