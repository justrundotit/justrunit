services:
  web:
    build:
      dockerfile: Dockerfile.dev
    ports:
      - "4000:4000"
    depends_on:
        pg:
          condition: service_healthy
          restart: true
        minio:
          condition: service_healthy
          restart: true
        #cloud-hypervisor:
        #  condition: service_healthy
        #  restart: true
    environment:
      - MIX_ENV=dev
      - PHX_HOST=localhost
      - SECRET_KEY_BASE=DElG+3akCkNp+QmIx3kmvmjXMUni6zLZU5n9B9sF++u+4J+EfiOsxYGpzYqkyrh+
      - DATABASE_URL=ecto://postgres:postgres@pg/justrunit_dev
      - AWS_ENDPOINT_URL_S3=http://minio:9000
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
    volumes:
      - .:/app
      - /app/deps
      - /app/_build

  pg:
    image: postgres
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=justrunit_dev
    volumes:
      - pgdata:/tmp/pg_data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d justrunit_dev"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - miniodata:/tmp/minio_data
    environment:
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD-SHELL", "curl -I http://localhost:9000/minio/health/live"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s  
      
  setup-buckets:       
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
        restart: true
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add jri_minio http://minio:9000 minioadmin minioadmin &&
      /usr/bin/mc mb jri_minio/justrunit &&
      /usr/bin/mc policy download jri_minio/justrunit &&
      exit 0
      "

  cloud-hypervisor:
    build:
      context: .
      dockerfile: Dockerfile.cloud-hypervisor
    #devices:
      #- /dev/kvm:/dev/kvm
    volumes:
      - ./cloudinit_config:/cloudinit_config
    #healthcheck:
    #  test: ["CMD-SHELL", "cloud-hypervisor --kernel ./linux-cloud-hypervisor/arch/x86/boot/compressed/vmlinux.bin --console off --serial tty	--disk path=focal-server-cloudimg-amd64.raw	--cmdline \"console=ttyS0 root=/dev/vda1 rw\" --cpus boot=4 --memory size=1024M --net \"tap=,mac=,ip=,mask=\""]
    #  interval: 10s
    #  retries: 5
    #  start_period: 30s
    #  timeout: 10s

  cloud-hypervisor-resources-limits-updater:
    image: docker:cli
    volumes:
      - ./cloud_hypervisor_resources_limits_updater.sh:/cloud_hypervisor_resources_limits_updater.sh
      - /var/run/docker.sock:/var/run/docker.sock
    entrypoint: ["bin/sh", "/cloud_hypervisor_resources_limits_updater.sh"]
    #depends_on:
    #  cloud-hypervisor:
    #    condition: service_healthy
    #    restart: true
    environment:
      - CH_UPDATE_INTERVAL=60

volumes:
  pgdata:
  miniodata:
  cloudinit_config:
